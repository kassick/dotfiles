;; ALWAYS show the tooltip. It's more vim-like and I
;; prefer it this way
;;(defun company--show-inline-p () nil)

;; Predicate to insert completion
(defun kzk/company-visible-and-explicit-action-p ()
  (and (company-tooltip-visible-p)
       (company-explicit-action-p)))

;; My take on docbuffers
(defun kzk/company-show-doc-buffer ()
  "Temporarily show the documentation buffer for the selection."
  (interactive)
  (let* ((selected (nth company-selection company-candidates))
         (doc-buffer (or (company-call-backend 'doc-buffer selected)
                         (company-doc-buffer (company-call-backend 'meta selected)))))
    (with-current-buffer doc-buffer
      (goto-char (point-min)))
    (display-buffer doc-buffer t)))

;; A doc-buffer frontend that updates the current docbuffer
(defun kzk/company-doc-buffer-frontend (command)
  "`company-doc-buffer-frontend' -- shows documentation for current candidate"
  (interactive)
  (when (eq command 'post-command)
    (let* ((selected (nth company-selection company-candidates))
           (meta-text (company-call-backend 'meta selected))
           (doc-buffer (or (company-call-backend 'doc-buffer selected)
                           (company-doc-buffer ""))))
      (if doc-buffer
          (let* ((doc-buffer-win (get-buffer-window doc-buffer)))
            (when doc-buffer-win
              (with-current-buffer doc-buffer
                (progn
                  (goto-char (point-min))
                  (insert (concat meta-text "\n\n"))))
              (display-buffer doc-buffer t)
                                        ;(minimize-window doc-buffer-win)
              (fit-window-to-buffer doc-buffer-win 10 2 nil nil t)))))))

(defun kzk/company-blacklist-files ()
  "Avoid company-dabbrev and dabbrev from showing trash generated by pdf and logs and the such"

  ;; Instruct dabbrev to ignore the same extensions (dabbrev wants regexp)
  (with-eval-after-load 'dabbrev
    (dolist (extension kzk-company/ignored-files-extensions)
      (push (format "\\(.*\\)\\.%s\\'" extension) dabbrev-ignored-buffer-regexps)))

  ;; Instruct company-dabbrev (affe) to check for this predicate for each buffer:
  ;; Either match the default ignore: \`[ *]  -- anything starting with space or *
  ;; Or anything matching any of the extensions
  (with-eval-after-load 'company-dabbrev
    (setq company-dabbrev-ignore-buffers
          (lambda (buffer)
            (let ((name (buffer-name buffer)))
              (or (string-match "\\`[ *]" name)
                  (seq-some (lambda (e)
                              (string-match (format "\\(.*\\)\\.%s\\'" e) name))
                            kzk-company/ignored-files-extensions)))))))
